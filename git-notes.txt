Git is a distributed version control system.
Github is a portal where we can host our git repo
Its Open source software

View file status(git status )-----------> (Add changes to statging area)    git add --------->(Commit files to local repo) git commit --------->
working tree ------------------------------>staging area ------------------------------------------------> local repository == these together make (Project directory)in local
Remote repository ==(Official project directory)
- This is a bare repository as source of truth
- It is a professionally manged repository hosted wither in a datacenter or in a cloud
- It interacts with other systems like issue trackers and continous delivery pipelines.
Hosted options:
Github
big buket
- No working tree for a remote repo
- Remote repository ends with.git
if you already have local repository than do git remote add otherwise create a repo in git hub and clone it to local.
whtever we work on in local system is local repo.There are two types of repo 1)local repo 2)Remote repo.There can be any no of remote repos
there is no central repo concept

DELL@DELL-PC MINGW32 /d/Programming/git-notes (master)
$ git remote add origin https://github.com/Manasa-1510/git-notes.git

DELL@DELL-PC MINGW32 /d/Programming/git-notes (master)
$ git remote show origin
* remote origin
  Fetch URL: https://github.com/Manasa-1510/git-notes.git
  Push  URL: https://github.com/Manasa-1510/git-notes.git
  HEAD branch: (unknown)



Creating a git repository
1)Create a repo folder (this represents the folder which will contain all the local repositories)
2)Create a myProj a single repository
3)run git init to initialize this as git workingtree and .git file is generated.

Commands 
touch followed by file name creates a new file
git init - to initialize the working tree with git
git status - to view the status of files in the working tree and staging area
git status -s : view short status
git add -to add content to staging area.This takes the file name '/ directory name as argument or provide '.
git add - u ,git add - U, git add - A, git add - all
git checkout : this disgards the changes in the staging area and rovides copy fromm local repo
git rm : to remove a file from staging area
git delete: to remove from repo
git diff : tells the chnages that are in working area compared to staging area or repo
git commit -m: command to add the commits in staging area.This is entire snapshot of the project. -m to specify comments
Without -m git opens an editor to enter multiline comments. to come out of it type :x!
git log : to view the commit logs
git log --oneline : condensed version of git logs
git clone: create local copy of remote repo (the project hosting provides the url)
git remote : Provides information about remote repository associated with local repo
git remote add:
git push -u repository branch : 
A push writes commits for a branch to a remote repository

Import repository
- import an existing repository from other specify the url and click import

origin : Is the alias name for the git repo url

Master : This is the default branch in the repository

Branch : 
All Commits belong to a branch
By default, there is a single branch and it is called master


Plumbing commands and Posting commands
cat-file-p

Each commit is stored in a tree structure view it by going into .git/objects
git has two data structures - Tree(directory), blob(single/leaf/node)

Git configuration with order
- system users working on system level
- local - working on personal projects then to configure username and email id
- global user working on multiple projects. Using corp ID as username and email ID.This applicable for all projects

Git LifeCycle
workingarea --------->staging area----------->git directory(local repo)
untracked->tracked->modified->staged->localrepo
	add--------->edit---------->add
remove<----------checkout<---------commit
File states

->Untracked
->Tracked

Ignoring untracked files
->Create .gitignore file

commit e8c02bbb0a9210e433a0007c872134acd8c0eb22 (HEAD -> master) commit id hashkey -> value is the content
for each commit we get a new repository

To view the content giving key plumbing commands it gives infor about parent author ad committer
$ git cat-file -p  e8c02bbb0a9210e433a0007c872134acd8c0eb22
tree 0284922b0bd9763f17195429ff9aeff59158e054
author Manasa <manasa.v.09@gmail.com> 1531839928 +0530
committer Manasa <manasa.v.09@gmail.com> 1531839928 +0530

Plumbing commands and postline commands(used daily)
Two kinds of datatypes :
Directory - tree
Blob - leaf node or file
the local repo data is stored as encrypted data in  .git files
git internally uses key and value database.
Each commit to the repo is taken as key and a hashvalue is generated which is stored as key and contentx are stored as value

this command stores the hash value of the object in git database
$ echo 'content' | git hash-object -w --stdin
d95f3ad14dee633a758d2e331151e950dd13e4ed

git takes of all the changes as each chnage commited creates a new hash-object

git cat-file -t hash value --->This command gives the datatype


